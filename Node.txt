Node 不是一门语言  它和浏览器很相似  只是一个渲染和解析JS代码的平台  而且这个平台渲染JS的引擎是谷歌的V8引擎
之前JS只是一门轻量级的客户端脚本编程语言（因为之前只能运行在客户端的浏览器中）  现在可以把服务器安装在一个NODE平台  使用JS代码开发服务器端的程序 最后有NODE平台把JS代码执行即可   so现在开始：JS是一门轻量级 的全栈开发语言 和失眠上流行的PHP JAVA C# 等同样的重要..



NODE的特色：
    基于V8引擎：JS写的服务器端程序运行更快
    单线程异步基于事件驱动处理的
    无阻塞I/O操作（文件操作）：
	当JS代码在客户端的浏览器中运行的时候  为了保证用户电脑信息的安全  浏览器禁止JS代码操作客户本地的文件的（客户端的JS没有I/O操作）
	当JS运行在服务器端的NODE环境下 NODE允许JS操作服务上的文件

NODE和谷歌浏览器的区别
    谷歌的全局对象叫做window
    NODE环境下的全局对象叫做global  在NODE下写JS不需要考虑兼容

如何在NODE环境下执行JS？
    1）  在WebStorm中 右键 run XX.js  这样也相当于使用node.exe  把js代码执行了（这个方法有时候会出现缓存。意思就是代码改了 也没有执行最新代码）
    2）  通过DOS命令执行NODE 命令  从而执行JS代码
		找到当前JS文件所在的目录  通过shift + 右键  打开命令窗口  在DOS窗口中 执行node XX.js  把JS代码执行
    3）  使用node的RPEL命令编写和执行JS代码（相当于浏览器控制台中输入JS代码执行）
    



NODE的模块
    内置模块：NODE平台提供的
	服务器端一般需要处理的事情：
	    创建一个服务 并且监听一个服务	http
	    接收客户端的请求	ul
	    从服务器指定的文件目录下 读取出文件中的内容	fs
	    把读取的内容返回给客户端	http

    自定义模块：自己写的
	在NODE环境下  只要新创建一个JS  都可以相当于新创建了一个自定义模块  例如：创建了一个A.js  就相当于创建了A模块  
	每一个模块都是独立的空间   和其他模块之间不会产生任何的冲突  例如：A中有个fn方法  B也有  但是A和B的方法是不同的两个方法 不会有任何的冲突
	在B中使用A的方法：
	    在B中导入A：var a = require("./A");
	    在A中导出供别人使用的方法：module.exports = { fn:fn };
	    在B中：a.sum();
    第三方模块：别人写好的
        NODE下第三方模块的管理统一使用npm命令  需要使用第三方模块可在www.npmjs.com
	安装：npm install less  安装在当前目录下（只有当前的项目可以使用less模块）
	      npm install less -g  把模块安装在全局下（所有的项目都可以使用）
	卸载：npm uninstall less  在当前目录下卸载模块
	      npm uninstall less -g 在全局下卸载模块

	导入第三方模块：	
		在需要的模块的JS中：
			var lessM = require("less");
		导入成功了就可以调取对应的方法执行了
			lessM.render();
	



HTTP 模块：
	var server1 = http.createServer([callback]); [callback] 这个回调函数不是在服务创建成功的时候执行 而是在客户端向当前服务发送请求的时候才执行
	server1就是创建的服务
	server1.listen(80,[callback]); 给当前创建出来的这个服务监听一个端口号80；[callback]是传递进来的回调函数  监听成功后会执行这个回调函数

    当服务创建成功后 客户端的浏览器可以通过输入http://localhost:80/


URL模块：
	在此模块中 提供了parse方法 可以把一个URL地址的各部分进行解析
	var res = url.parse("http://www.sunshuhao.com",true); 在第二个参数写true和不写的区别：不写true  query属性获取的值就是一个字符串 加上true之后会把这个字符串自动解析为一个对象，


FS模块：
	在此模块中提供了一些方法 供我们进行I/O操作